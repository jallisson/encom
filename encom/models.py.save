# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import datetime
from datetime import datetime
import sys
import time
from django.db import models
from localflavor.br.br_states import STATE_CHOICES
from django.utils import timezone
from django.contrib.auth.models import User
from django.urls import reverse
from django.utils.html import mark_safe
from django.db.models import F, FloatField, Sum
from decimal import Decimal


class Carro(models.Model):
    nome = models.CharField(max_length=200)
    def __str__(self):
        return self.nome
        
class Localidade(models.Model):
    nome = models.CharField(max_length=200)
    uf = models.CharField(max_length=50, choices = STATE_CHOICES)
    def __str__(self):
        return self.nome

class Agencia(models.Model):
    localidade = models.ForeignKey(Localidade, on_delete=models.CASCADE)
    nome = models.CharField(max_length=200)
    def __str__(self):
        return self.nome

class Cliente(models.Model):
    nome = models.CharField(max_length=200)
    endereco = models.CharField(max_length=200, null==True)
    bairro = models.CharField(max_length=100, null=True)
    cidade = models.CharField(max_length=100, null=True)
    uf = models.CharField(max_length=50, choices = STATE_CHOICES)
    cep = models.CharField(max_length=8)
    telefone = models.CharField(max_length=14)
    email = models.CharField(max_length=100)
    def __str__(self):
        return self.nome

class Empresa(models.Model):
    nome = models.CharField(max_length=200)
    cnpj = models.CharField(max_length=18)
    ie = models.CharField(max_length=50)
    def __str__(self):
        return self.nome

class Produto(models.Model):
    nome = models.CharField(max_length=200)
    valor = models.DecimalField(verbose_name=u'valor',
                                 max_digits=15, decimal_places=2)
    def __str__(self):
        return '%s %s' % (self.nome,  str(self.valor))



class Motorista(models.Model):
    chapa = models.CharField(max_length=200)
    nome = models.CharField(max_length=200)
    cpf = models.CharField(max_length=14)
    def __str__(self):
        return self.nome


TIPO_FRETE = (
        ('PAGO', 'PAGO'),
        ('A PAGAR', 'A PAGAR'),
	    ('CORTESIA', 'CORTESIA')
    )

RESPONSAVEL_FRETE = (
        ('REMETENTE', 'REMETENTE'),
        ('DESTINATARIO', 'DESTINATARIO'),
	    ('REDESPACHO', 'REDESPACHO')
    )
SITUACAO_VENDA = (
        ('ATIVA', 'ATIVA'),
        ('CANCELADA', 'CANCELADA')
    )

class Venda(models.Model):
    id = models.AutoField(u'AÇAIEX', primary_key=True)
    hora_saida = models.TimeField(max_length=4)
    responsavel_frete = models.CharField(max_length=14, choices = RESPONSAVEL_FRETE, default='REMETENTE')
    empresa = models.ForeignKey(Empresa, on_delete=models.CASCADE)
    localidade_origem = models.ForeignKey(Localidade, on_delete=models.CASCADE, related_name ='localidade_origem')
    localidade_destino = models.ForeignKey(Localidade, on_delete=models.CASCADE, related_name ='localidade_destino')	
    cliente_origem = models.ForeignKey(Cliente, on_delete=models.CASCADE, related_name ='cliente_origem')
    cliente_destino = models.ForeignKey(Cliente, on_delete=models.CASCADE, related_name ='cliente_destino')
    carro = models.ForeignKey(Carro, on_delete=models.CASCADE)
    motorista_principal = models.ForeignKey(Motorista, on_delete=models.CASCADE, related_name ='motorista_principal')
    motorista_reserva = models.ForeignKey(Motorista, on_delete=models.CASCADE , related_name ='motorista_reserva')
    #valores default
    data_venda = models.DateTimeField(auto_now_add=True)
    situacao_venda = models.CharField(max_length=10, choices = SITUACAO_VENDA, default='ATIVA')  
    #aba de valores teste
    tipo_frete = models.CharField(max_length=10, choices = TIPO_FRETE, default='PAGO')
    dinheiro = models.BooleanField()
    dinner_clubs = models.BooleanField()
    american_express = models.BooleanField()
    cred_shop = models.BooleanField()
    master_card = models.BooleanField()
    visa = models.BooleanField()
   
    valor_nota = models.DecimalField(verbose_name=u'Valor Nota',
                                 max_digits=15, decimal_places=2, null=True, blank=True)
    valor_dinheiro = models.DecimalField(verbose_name=u'Valor Dinheiro',
                                 max_digits=15, decimal_places=2)
    valor_cartao = models.DecimalField(verbose_name=u'Valor Cartão',
                                 max_digits=15, decimal_places=2)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    #produto = models.ManyToManyField(Produto, blank=False, default=None)

    def _str_(self):
        return str(self.cliente_origem)

    def imprimir(self):
        return mark_safe("<a target='_blank' href='%s'>Imprimir</a>" % self.get_absolute_url())
    imprimir.allow_tags = True

    def get_absolute_url(self):
        return reverse('venda_detail', args=[self.pk, ])

    def get_venda(self):
        return Venda.objects.get(pk=self.pk)

    def total(self):
        soma = Venda.objects.filter(id=self.id).aggregate(total=Sum('item__qtde', flat = True))
        return soma['total']

    def valortotal(self):
        soma = Venda.objects.filter(id=self.id).aggregate(valortotal=Sum('item__produto__valor', flat = True))
        return soma['valortotal']

    def valortotalnota(self):
        soma = Sum('valor_nota', flat = True)
        return soma['valortotalnota']    

    def desconto(self):
        valortotal = Venda.objects.filter(id=self.id).aggregate(valortotal=Sum(F('item__produto__valor'), output_field=FloatField()))
        valor_nota = self.valor_nota
        # exemplo de porcetagem return  100 - float(valor_nota.replace(",",".")) * 100 / float(valortotal['valortotal'])
        return  Decimal(valortotal['valortotal']) - Decimal(valor_nota)
        #return float(valortotal['valortotal'])

    def save(self, force_insert=False, force_update=False):
        self.valor_nota = self.valor_dinheiro + self.valor_cartao 
        super(Venda, self).save(force_insert, force_update)

    #def lista(self):
    #    return mark_safe("<a target='_blank' href='%s'>Listar</a>" % self.get_absolute_url2())
    #    imprimir.allow_tags = True

    #def get_absolute_url2(self):
    #    return reverse('venda_list', args=[self.pk, ])


    
class Item(models.Model):
    produto = models.ForeignKey(Produto, on_delete=models.CASCADE, null=True, blank=True, default=None)
    qtde = models.PositiveIntegerField(null=True, blank=False)
    venda = models.ForeignKey(Venda, on_delete=models.CASCADE, default=None)

class Relatorio(models.Model):
    data_inicial = models.DateTimeField(default=timezone.now)
    data_final = models.DateTimeField(default=timezone.now)

    def imprimir(self):
        return mark_safe("<a target='_blank' href='%s'>Imprimir</a>" % self.get_absolute_url())
    imprimir.allow_tags = True

    def get_absolute_url(self):
        return reverse('venda_data_list', args=[self.pk, ])

    def __str__(self):
        return str(self.data_inicial)


    def get_valor(self):
      inicio = self.data_inicial
      fim = self.data_final
      valor = Venda.objects.filter(data_venda__range=[inicio, fim]).aggregate(valor=Sum(F('valor_nota'), output_field=FloatField()))
      return  valor['valor']

    def get_total(self):
      inicio = self.data_inicial
      fim = self.data_final
      valor = Venda.objects.filter(data_venda__range=[inicio, fim]).aggregate(valor=Sum(F('valor_nota'), output_field=FloatField()))
      return  valor['valor']

    def save(self, *args, **kwargs):
        if self.data_inicial > self.data_final:
            raise forms.ValidationError()
        else: 
         super(Relatorio, self).save()
